<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://47.95.215.1:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://47.95.215.1:4000/" rel="alternate" type="text/html" /><updated>2025-02-25T06:59:54+00:00</updated><id>http://47.95.215.1:4000/feed.xml</id><title type="html">HONEST的个人主页</title><subtitle>这里是HONEST的个人主页，存放我的想法和学习的笔记</subtitle><author><name>HONEST</name><email>2260363172qq.com</email></author><entry><title type="html">在服务器上使用Jekyll和Nginx实现SSL和用户登录</title><link href="http://47.95.215.1:4000/%E7%AC%94%E8%AE%B0/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BD%BF%E7%94%A8Jekyll%E5%92%8CNginx%E5%AE%9E%E7%8E%B0SSL%E5%92%8C%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/" rel="alternate" type="text/html" title="在服务器上使用Jekyll和Nginx实现SSL和用户登录" /><published>2025-02-25T00:00:00+00:00</published><updated>2025-02-25T06:59:09+00:00</updated><id>http://47.95.215.1:4000/%E7%AC%94%E8%AE%B0/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BD%BF%E7%94%A8Jekyll%E5%92%8CNginx%E5%AE%9E%E7%8E%B0SSL%E5%92%8C%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95</id><content type="html" xml:base="http://47.95.215.1:4000/%E7%AC%94%E8%AE%B0/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BD%BF%E7%94%A8Jekyll%E5%92%8CNginx%E5%AE%9E%E7%8E%B0SSL%E5%92%8C%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/"><![CDATA[<h2 id="需求描述">需求描述</h2>
<p>在jekyll上编译了一个<a href="/%E7%AC%94%E8%AE%B0/%E5%9F%BA%E4%BA%8EJekyll%E5%92%8CGithub-Page%E7%9A%84%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E6%90%AD%E5%BB%BA%E7%BB%8F%E9%AA%8C/">静态网页</a>用来作为我的个人网页。但是每次编辑网页存在着比较大的问题——我需要先在本地编写MarkDown文本然后push到github上，等待他的自动构建。</p>

<p>于是我在jekyll上使用了<a href="/%E9%97%AE%E9%A2%98/jekyll-admin%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8C%85%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/">jekyll-admin</a>来进行后台管理我的个人主页的博客，每次更改博客时自动进行增量式的静态页面构建。但是此时我还是遇到了一些问题，使得我需要重构我的个人网页结构。</p>

<p>第一点是<strong>拓展性问题</strong>。</p>

<p>github page托管的终究只是一个简单的页面。想要满足不同的需求，解决各种的问题，为其添加其他的功能，就需要在具有更高自主权的linux主机上运行服务才方便。</p>

<p>第二点是<strong>Jekyll的跳转问题</strong>。</p>

<p>jekyll默认的ip和端口是127.0.0.1:4000。运行在ECS云服务器上时，你需要让服务器监听所有的ip的接入，需要配置为0.0.0.0:4000.但是此时jekyll-admin页面的跳转存在着问题，预览界面时他会尝试在0.0.0.0上进行跳转。</p>

<p>第三点是<strong>安全性问题</strong>。</p>

<p><strong>登陆问题</strong>jekyll-admin插件提供的后台管理界面 <code class="language-plaintext highlighter-rouge">/admin</code>是任何人都可以登录进行修改的，这非常的不安全。我需要一个用户登录管理的功能。</p>

<p><strong>SSL/TLS加密问题</strong>。jekyll编译和提供的服务是没有进行SSL加密的，是以HTTP的方式进行的访问，应该对其添加加密使其以HTTPS方式访问。</p>

<h2 id="解决方案分析">解决方案分析</h2>
<p>正好我有一个阿里云的ECS<strong>云服务器</strong>（之前用来搭建<a href="/%E7%AC%94%E8%AE%B0/%E4%BD%BF%E7%94%A8vsftpd%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91ECS%E4%B8%8A%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/">FTP server</a>），可以比较容易的把Jekyll的服务器转移到linux的云服务器上运行。这样第一个问题就解决了。</p>

<p>对于第二和第三个问题，有一个成熟的方案可以同时解决这两个问题——<strong>Web代理服务器</strong>。</p>

<p>Web服务器为服务器提供反向的代理，可以把向云服务器的公网的某个IP的端口上访问的链接转移到其他的IP的端口，当然也包括本地的IP。Web服务器也可以和其他的方法相结合提供网页的SSL加密和用户登录管理。</p>

<p>这里使用<code class="language-plaintext highlighter-rouge">Nginx</code>作为Web服务器，使用<code class="language-plaintext highlighter-rouge">certbot</code>从Let’s Encrypt这一机构获得免费的SSL/TLS证书，使用<code class="language-plaintext highlighter-rouge">apache2-utils</code>中的<code class="language-plaintext highlighter-rouge">htpasswd</code>工具进行用户的加密。</p>

<h2 id="实现">实现</h2>

<h3 id="一下载所需的工具包">一、下载所需的工具包</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt upgrade

<span class="nb">sudo </span>apt <span class="nb">install </span>certbot python3-certbot-nginx
<span class="nb">sudo </span>apt <span class="nb">install </span>apache2-utils
</code></pre></div></div>
<h3 id="二获得ssltls证书">二、获得SSL/TLS证书</h3>

<h4 id="1初步设置nginx">1.初步设置Nginx</h4>
<p>确保 Nginx 已经配置了正确的服务器块，并且可以通过 HTTP（端口 80）访问你的域名。</p>

<p>打开Nignx的设置文件</p>

<p><code class="language-plaintext highlighter-rouge">sudo vi /etc/nginx/sites-available/default</code></p>

<p>清空，重新写入以下内容</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
    server_name www.honest-zh.me;  # 确保配置了正确的域名

    root /home/honest/honestblog/_site;  # 根据实际路径调整

    index index.html index.htm;

    # 可选：配置特定路径
    location / {
        try_files $uri $uri/ =404;
    }
</code></pre></div></div>

<p>运行<code class="language-plaintext highlighter-rouge">sudo nginx -t</code>,保证Nginx设置的正确。</p>

<h4 id="2使用certbot">2.使用certbot</h4>

<p>想要使用certbot为域名生成SSL证书需要确保以下的两个前提。</p>

<p><strong>域名已经指向你的服务器</strong>：确保 honest-zh.me 域名的 DNS 记录已经正确指向你的服务器的公共 IP 地址。如果你还没有配置 DNS，请在域名注册商的管理面板中设置 A 记录，指向你的服务器 IP 地址。</p>

<p><strong>Nginx配置正常</strong>：确保你的服务器上已经安装并配置了 Nginx。</p>

<p>那之后执行命令<code class="language-plaintext highlighter-rouge">sudo certbot --nginx -d www.honest-zh.me</code>获得SSL证书，保存的证书在路径<code class="language-plaintext highlighter-rouge">/etc/letsencrypt/live/www.honest-zh.me/</code>下。这个命令会执行以下的操作：</p>

<ol>
  <li>获取证书：它会向 Let’s Encrypt 服务器请求一个 SSL 证书。</li>
  <li>修改 Nginx 配置：它会自动为你的域名配置 SSL，更新 Nginx 配置文件，添加 SSL 相关的配置（例如 ssl_certificate 和 ssl_certificate_key）。</li>
  <li>重载 Nginx：它会重新加载 Nginx，使得新证书和配置立即生效。</li>
</ol>

<p>certbot从Let’s Encrypt获取的证书有效期为 90 天，因此需要定期续期。为了确保证书能够自动续期，可以设置一个 cron 任务，每天检查并续期证书。</p>

<p><code class="language-plaintext highlighter-rouge">sudo crontab -e</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 */12 * * * certbot renew --quiet &amp;&amp; systemctl reload nginx
</code></pre></div></div>
<h3 id="三设置用户名密码">三、设置用户名密码</h3>

<p>执行命令</p>

<p><code class="language-plaintext highlighter-rouge">sudo htpasswd -c /etc/nginx/.htpasswd honest</code></p>

<p>用户文件将储存在.htpasswd中</p>

<h3 id="四设置ngnixhttp重定向服务器反向代理用户验证">四、设置Ngnix（HTTP重定向、服务器反向代理、用户验证）</h3>

<p>打开Nignx的设置文件</p>

<p><code class="language-plaintext highlighter-rouge">sudo vi /etc/nginx/sites-available/default</code></p>

<p>清空，重新写入以下内容</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
    listen 80;
    server_name www.honest-zh.me;  # 替换为你的域名
    # HTTP -&gt; HTTPS 重定向
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name www.honest-zh.me;  # 替换为你的域名
    # SSL 配置（Certbot 自动配置的证书路径）
    ssl_certificate /etc/letsencrypt/live/www.honest-zh.me/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.honest-zh.me/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    # 反向代理 Jekyll 服务
    location / {
        proxy_pass http://127.0.0.1:4000;  # 将请求转发到 Jekyll 本地服务
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /admin {
    auth_basic "Restricted Access";
    auth_basic_user_file /etc/nginx/.htpasswd;

    proxy_pass http://127.0.0.1:4000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    }
}
</code></pre></div></div>

<p>运行<code class="language-plaintext highlighter-rouge">sudo nginx -t</code>,保证Nginx设置的正确。</p>

<blockquote>
  <p>启动<code class="language-plaintext highlighter-rouge">sudo systemctl start nginx</code></p>

  <p>停止 
<code class="language-plaintext highlighter-rouge">sudo systemctl stop nginx</code></p>

  <p>重启 
<code class="language-plaintext highlighter-rouge">sudo systemctl restart nginx</code></p>

  <p>重新加载
<code class="language-plaintext highlighter-rouge">sudo systemctl reload nginx</code></p>

  <p>禁用启动时自动启动
<code class="language-plaintext highlighter-rouge">sudo systemctl disable nginx</code></p>

  <p>启用启动时自动启动
<code class="language-plaintext highlighter-rouge">sudo systemctl enable nginx</code></p>

  <p>查看服务状态
<code class="language-plaintext highlighter-rouge">sudo systemctl status nginx</code></p>
</blockquote>]]></content><author><name>HONEST</name><email>2260363172qq.com</email></author><category term="笔记" /><category term="Jekyll" /><category term="个人主页" /><category term="ECS" /></entry><entry><title type="html">Twin Theives</title><link href="http://47.95.215.1:4000/%E9%9A%8F%E7%AC%94/twin-theives/" rel="alternate" type="text/html" title="Twin Theives" /><published>2025-02-24T00:00:00+00:00</published><updated>2025-02-25T06:59:09+00:00</updated><id>http://47.95.215.1:4000/%E9%9A%8F%E7%AC%94/twin-theives</id><content type="html" xml:base="http://47.95.215.1:4000/%E9%9A%8F%E7%AC%94/twin-theives/"><![CDATA[<p><strong>It is not burdens of today that drive men mad.</strong></p>

<p><strong>It is the regrets over yesterday and the fear of tomorrow.</strong></p>

<p><strong>Regret and fear are twin thieves who rob us of today.</strong></p>]]></content><author><name>HONEST</name><email>2260363172qq.com</email></author><category term="随笔" /></entry><entry><title type="html">Jekyll Admin使用的包依赖问题</title><link href="http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/jekyll-admin%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8C%85%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/" rel="alternate" type="text/html" title="Jekyll Admin使用的包依赖问题" /><published>2025-02-22T00:00:00+00:00</published><updated>2025-02-25T06:59:09+00:00</updated><id>http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/jekyll-admin%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8C%85%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98</id><content type="html" xml:base="http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/jekyll-admin%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8C%85%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/"><![CDATA[<h1 id="问题描述">问题描述</h1>
<p>我希望找到一个在线编辑jekyll的文档的方式，这样我们可以使用不同的设备在网页进行编辑。好消息是jekyll有一个专门用于实现的插件叫做jekyll-admin,可以比较方便的进行管理。</p>

<p>正常来说，在Gemfile和_config里添加jekyll-admin，然后再执行bundle install命令即可使用这个插件。但是这次却在静态网页bulid之后发生了问题。</p>

<p>问题报错如下：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll_admin_monkey_patch': uninitialized constant Rack::Handler (NameError)

          @server.mount "/admin", Rack::Handler::WEBrick, JekyllAdmin::StaticServer
                                               ^^^^^^^^^
</code></pre></div></div>
<p>未找到rack里对于webrick的定义</p>

<p>然而我使用bundle list出现的结果确实有的，怀疑是出现了包依赖问题</p>

<h1 id="解决方法">解决方法</h1>
<p>尝试了bundle update等方法更新rack, 但是到了最新版本问题依然存在。进一步怀疑是包依赖发生了冲突？使用bundle check并没有找到冲突的依赖项，让人更是摸不着头脑。</p>

<p>最后我去jekyll-admin的<a href="https://github.com/jekyll/jekyll-admin/issues/705">Github Issue</a>上看了一下才发现了问题。这个问题是jekyll-admin 的依赖项sinatra的更新导致的——sinatra 版本更新到 4.0之后放弃了对 rack 2 的支持。</p>

<p>只需在 gemfile 中添加此内容将sinatra版本回退到4.0之前即可。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem "sinatra", "&gt;= 3", "&lt; 4"。
</code></pre></div></div>]]></content><author><name>HONEST</name><email>2260363172qq.com</email></author><category term="问题" /><category term="Jekyll" /></entry><entry><title type="html">Ftp二进制文件传输问题</title><link href="http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/FTP%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E9%97%AE%E9%A2%98/" rel="alternate" type="text/html" title="Ftp二进制文件传输问题" /><published>2025-02-19T00:00:00+00:00</published><updated>2025-02-25T06:59:09+00:00</updated><id>http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/FTP%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E9%97%AE%E9%A2%98</id><content type="html" xml:base="http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/FTP%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E9%97%AE%E9%A2%98/"><![CDATA[<h1 id="问题描述">问题描述</h1>
<p>使用<a href="/%E7%AC%94%E8%AE%B0/%E4%BD%BF%E7%94%A8vsftpd%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91ECS%E4%B8%8A%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/">在ECS上通过vsftpd建立的FTPserver</a>，出现传输可执行文件时发生段错误的报错。</p>

<p>完整的流程是这样：我在ARM64的笔记本上build了一个项目，然后为了方便传输，直接将整个编译结果的文件夹传上了FTP server。在x86架构的Windows的设备上，我从FTP server上下载了编译结果，部署到了rk3588的开发板上（开发板的指令架构和ARM64的笔记本一致，出于嵌入式系统的最小化考虑，裁剪的linux上没有安装构建所需的工具包）。执行可执行文件时报错：segmentation fault ，段错误。</p>

<p>首先想的是不是编译的平台的问题，但是这种情况的报错一般不是这个，而是不适合的架构 Exec format error。
第二部考虑的就是ftp传输的问题。</p>
<h1 id="解决方法">解决方法</h1>
<p>查阅资料以后发现，ftp具有两种文件传输的模式，一种是ASCII 模式、另一种是二进制模式来传输文件。ASCII 模式会对文件进行换行符转换（如将 \n 替换为 \r\n，<a href="/%E9%97%AE%E9%A2%98/bash%E8%84%9A%E6%9C%ACwin-linux%E4%B9%8B%E9%97%B4%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6%E9%97%AE%E9%A2%98/">LF和CRLF的问题</a>），这对文本文件的处理有一定好处，但是会损坏二进制文件。<strong>可执行文件应该在二进制模式下传输。</strong></p>

<p>FTP的server一般会自动的处理文件传输模式，也就是说问题取决于FTP客户端的设置，需要设置为二进制传输模式。</p>

<p>FileZella默认的是自动模式，偶尔会出现问题。
右上角-编辑-设置，在弹出窗口中选择 传输-FTP类型-二进制模式传输文件
<img src="/assets/images/blog/2025-02-19%201.png" alt="" /></p>]]></content><author><name>HONEST</name><email>2260363172qq.com</email></author><category term="问题" /><category term="FTP" /><category term="vsftpd" /></entry><entry><title type="html">Wsl2突然无法使用</title><link href="http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/wsl2%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/" rel="alternate" type="text/html" title="Wsl2突然无法使用" /><published>2025-02-06T00:00:00+00:00</published><updated>2025-02-25T06:59:09+00:00</updated><id>http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/wsl2%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8</id><content type="html" xml:base="http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/wsl2%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/"><![CDATA[<h1 id="问题描述">问题描述</h1>
<p>之前一直可以使用的wsl突然抽风无法使用。powershell运行wsl报错：</p>

<blockquote>
  <p>PS C:\WINDOWS\system32&gt; wsl
当前计算机配置不支持 WSL2。
请启用“虚拟机平台”可选组件，并确保在 BIOS 中启用虚拟化。
通过运行以下命令启用“虚拟机平台”: wsl.exe –install –no-distribution
有关信息，请访问 https://aka.ms/enablevirtualization
错误代码: Wsl/Service/CreateInstance/CreateVm/HCS/HCS_E_HYPERV_NOT_INSTALLED</p>
</blockquote>

<h1 id="解决方法">解决方法</h1>
<p>确保在启动配置中启用了虚拟机监控程序启动。 可以通过运行（提升的 PowerShell）来对此进行验证：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> bcdedit /enum | findstr -i hypervisorlaunchtype
</code></pre></div></div>

<p>如果看到 hypervisorlaunchtype Off，则会禁用虚拟机监控程序。 使其在提升的 PowerShell 中运行：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> bcdedit /set hypervisorlaunchtype Auto
</code></pre></div></div>

<p>设置完成以后重新启动wsl,wsl就工作正常了。</p>

<blockquote>
  <p>猜想：设置的 hypervisorlaunchtype 属性是 Auto,有时会自动关掉？是的，尤其是在windows对wsl进行了更新的情况下。（沟槽的微软阿三程序员#￥%@。。。以下略）</p>
</blockquote>]]></content><author><name>HONEST</name><email>2260363172qq.com</email></author><category term="问题" /><category term="wsl" /></entry><entry><title type="html">2024年终总结</title><link href="http://47.95.215.1:4000/%E9%9A%8F%E7%AC%94/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/" rel="alternate" type="text/html" title="2024年终总结" /><published>2025-01-20T00:00:00+00:00</published><updated>2025-02-25T06:59:09+00:00</updated><id>http://47.95.215.1:4000/%E9%9A%8F%E7%AC%94/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93</id><content type="html" xml:base="http://47.95.215.1:4000/%E9%9A%8F%E7%AC%94/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"><![CDATA[<h1 id="序">序</h1>

<p>当我缓过神来，望向窗外旧屋屋檐上的皑皑白雪时，时间已经早就到了2025年。在带着弥散的火药味的寒风里，在农历的旧年的最后一天，拖延症晚期的我也不得不升起一定要将这一年迟来的总结终结在甲辰年的决心。“至少是在新年前完成了过去一年的总结——虽然是农历”自欺欺人的想着，我敲起了键盘。</p>

<p>实际上我已经好久没有像这样写年终总结了。重新开始写点东西梳理梳理思绪，记录下自己的想法也只不过是不久前的事情——这都多亏了我自己搞了一个个人网站。有了个人网站之后，不由自主的就想着不能让它总是一片尴尬的空白，这反过来倒逼着自己去输出一些东西。</p>

<p>一开始是普通的技术总结和工作记录，然后是自己在游戏、动画等作品之后的一些感悟和体会，再之后是像高中那样对自己和过去进行总结和分析——五年之后的今天，我又开始了和自己的长谈。</p>

<h1 id="转">转</h1>

<p>要用一个字总结2024年，那应该是“转”。2024年是我生活中的一个重要转折点——在2024年的上半年我还是一个普通的学生，在2024年的下半年我实际上已经成了一个朝九晚五的社畜。</p>

<p>研一的生活说实话和本科相比实际上没有什么区别，重复着上课、笔记、作业、考试的古旧循环。</p>

<p>#</p>]]></content><author><name>HONEST</name><email>2260363172qq.com</email></author><category term="随笔" /><category term="年终总结" /></entry><entry><title type="html">使用ghpage分支配置jekyll网页的自定义域名问题</title><link href="http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/%E4%BD%BF%E7%94%A8ghpage%E5%88%86%E6%94%AF%E9%85%8D%E7%BD%AEjekyll%E7%BD%91%E9%A1%B5%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E9%97%AE%E9%A2%98/" rel="alternate" type="text/html" title="使用ghpage分支配置jekyll网页的自定义域名问题" /><published>2025-01-20T00:00:00+00:00</published><updated>2025-02-25T06:59:09+00:00</updated><id>http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/%E4%BD%BF%E7%94%A8ghpage%E5%88%86%E6%94%AF%E9%85%8D%E7%BD%AEjekyll%E7%BD%91%E9%A1%B5%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E9%97%AE%E9%A2%98</id><content type="html" xml:base="http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/%E4%BD%BF%E7%94%A8ghpage%E5%88%86%E6%94%AF%E9%85%8D%E7%BD%AEjekyll%E7%BD%91%E9%A1%B5%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E9%97%AE%E9%A2%98/"><![CDATA[<h1 id="问题描述">问题描述</h1>
<p>最近在阿里云上为我的个人网页购买了一个域名<code class="language-plaintext highlighter-rouge">honest-zh.me</code>,我将<code class="language-plaintext highlighter-rouge">www.honest-zh.me</code>的链接重定向到了我之前在github page上托管的<a href="/笔记/基于Jekyll和Github-Page的个人主页搭建经验/">个人主页</a>。并在github的设置中的page选项的Custom domain里设置为了我的域名。很顺利的，域名可以跳转到我在github page上托管的个人网页网址<code class="language-plaintext highlighter-rouge">honest-zh.github.io</code>上。但当我更新我的博客，ghpage分支重新部署文件后，域名的重定向就失效了！</p>
<h1 id="解决方法">解决方法</h1>
<p>github page使用CNAME的文件管理自定义域名，观察到检测ghpage分支更新并进行部署的Github action工作流里面没有CNAME的设置项，添加<code class="language-plaintext highlighter-rouge">cname: www.honest-zh.me</code>
添加后的文件大致为：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Deploy to GitHub Pages</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">peaceiris/actions-gh-pages@v3</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">github_token</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">publish_dir</span><span class="pi">:</span> <span class="s">./_site</span>
        <span class="na">cname</span><span class="pi">:</span> <span class="s">www.honest-zh.me</span>  <span class="c1"># 自定义域名www.honest-zh.me</span>
</code></pre></div></div>]]></content><author><name>HONEST</name><email>2260363172qq.com</email></author><category term="问题" /><category term="Git" /><category term="Jekyll" /><category term="个人主页" /></entry><entry><title type="html">Systemd和systemctl</title><link href="http://47.95.215.1:4000/%E7%AC%94%E8%AE%B0/systemd%E5%92%8Csystemctl/" rel="alternate" type="text/html" title="Systemd和systemctl" /><published>2025-01-16T00:00:00+00:00</published><updated>2025-02-25T06:59:09+00:00</updated><id>http://47.95.215.1:4000/%E7%AC%94%E8%AE%B0/systemd%E5%92%8Csystemctl</id><content type="html" xml:base="http://47.95.215.1:4000/%E7%AC%94%E8%AE%B0/systemd%E5%92%8Csystemctl/"><![CDATA[<p>systemctl是一个在基于 systemd 的 Linux 系统中用于控制 systemd 系统和服务管理器的命令行工具。systemd 是一个系统和服务管理器，它提供了系统启动、服务管理、日志记录等一系列功能。systemctl命令是与 systemd 进行交互的主要方式，它非常强大且功能丰富。</p>
<h1 id="1-管理服务unit">1. 管理服务（Unit）</h1>
<h2 id="11-启动服务">1.1 启动服务：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start <span class="o">[</span>服务名称]
</code></pre></div></div>
<p>例如，启动httpd服务（假设已安装）：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
sudo systemctl start httpd
</code></pre></div></div>
<h2 id="12-停止服务">1.2 停止服务：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl stop <span class="o">[</span>服务名称]
</code></pre></div></div>
<p>例如，停止httpd服务：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl stop httpd
</code></pre></div></div>
<h2 id="13-重启服务">1.3 重启服务：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart <span class="o">[</span>服务名称]
</code></pre></div></div>
<p>例如，重启httpd服务，常用于在修改服务配置文件后使其生效：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart httpd
</code></pre></div></div>
<h2 id="14-重新加载服务配置">1.4 重新加载服务配置：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl reload <span class="o">[</span>服务名称]
</code></pre></div></div>
<p>此命令在不重启服务的情况下重新加载服务的配置文件，适用于某些服务可以在运行时重新加载配置而无需完全重启的情况，如nginx：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl reload nginx
</code></pre></div></div>
<h2 id="15-查看服务状态">1.5 查看服务状态：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status <span class="o">[</span>服务名称]
</code></pre></div></div>
<p>该命令显示服务当前的运行状态，包括是否正在运行、启动时间、最近一次启动或停止的结果等信息。例如查看vsftpd服务状态：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status vsftpd
</code></pre></div></div>
<p>输出类似如下内容：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plaintext
● vsftpd.service - vsftpd FTP server
   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)
   Active: active (running) since Mon 2024 - 01 - 01 10:00:00 UTC; 1h ago
  Process: 1234 ExecStart=/usr/sbin/vsftpd /etc/vsftpd.conf (code = exited, status = 0/SUCCESS)
 Main PID: 1234 (vsftpd)
    Tasks: 1 (limit: 4915)
   Memory: 1.2M
   CGroup: /system.slice/vsftpd.service
           └─1234 /usr/sbin/vsftpd /etc/vsftpd.conf
</code></pre></div></div>
<p>其中 “Active: active (running)” 表明服务正在运行。</p>
<h1 id="2-服务开机自启管理">2. 服务开机自启管理</h1>
<h2 id="21-设置服务开机自启">2.1 设置服务开机自启：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable</span> <span class="o">[</span>服务名称]
</code></pre></div></div>
<p>例如，设置httpd服务开机自启：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>httpd
</code></pre></div></div>
<p>执行后会创建或修改符号链接，将服务单元文件链接到系统启动相关的目录。</p>
<h2 id="22-取消服务开机自启">2.2 取消服务开机自启：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl disable <span class="o">[</span>服务名称]
</code></pre></div></div>
<p>例如，取消httpd服务开机自启：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl disable httpd
</code></pre></div></div>
<p>此命令会删除相关的符号链接，使服务在系统启动时不再自动启动。</p>
<h2 id="23-查看服务是否开机自启">2.3 查看服务是否开机自启：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl is - enabled <span class="o">[</span>服务名称]
</code></pre></div></div>
<p>例如，查看httpd服务是否开机自启，若输出为enabled则表示开机自启，若为disabled则表示未设置开机自启：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl is - enabled httpd
</code></pre></div></div>
<h1 id="3-系统管理相关">3. 系统管理相关</h1>
<h2 id="31-启动进入指定运行级别target">3.1 启动进入指定运行级别（target）：</h2>
<p>运行级别在 systemd 中被称为 target。例如，要启动到图形化界面（通常是graphical.target）：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start graphical.target
</code></pre></div></div>
<p>若要启动到多用户文本界面（multi - user.target）：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start multi - user.target
</code></pre></div></div>
<h2 id="32-查看当前运行级别target">3.2 查看当前运行级别（target）：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl get - default
</code></pre></div></div>
<p>输出结果会显示当前默认的启动目标，例如graphical.target或multi - user.target。</p>
<h2 id="33-设置默认运行级别target">3.3 设置默认运行级别（target）：</h2>
<p>例如，将默认运行级别设置为多用户文本界面：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">set</span> - default multi - user.target
</code></pre></div></div>
<p>若要恢复为图形化界面为默认：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">set</span> - default graphical.target
</code></pre></div></div>
<h2 id="34-重启系统">3.4 重启系统：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl reboot
</code></pre></div></div>
<h2 id="35-关闭系统">3.5 关闭系统：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl poweroff
</code></pre></div></div>
<h2 id="36-挂起系统进入睡眠状态">3.6 挂起系统（进入睡眠状态）：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">suspend</span>
</code></pre></div></div>
<h2 id="37-使系统进入休眠状态">3.7 使系统进入休眠状态：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl hibernate
</code></pre></div></div>
<h1 id="4-管理服务依赖关系">4. 管理服务依赖关系</h1>
<h2 id="41-查看服务依赖关系">4.1 查看服务依赖关系：</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl list - dependencies <span class="o">[</span>服务名称]
</code></pre></div></div>
<p>例如，查看httpd服务的依赖关系，会显示该服务所依赖的其他服务以及依赖它的服务：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl list - dependencies httpd
</code></pre></div></div>]]></content><author><name>HONEST</name><email>2260363172qq.com</email></author><category term="笔记" /><category term="Linux" /><category term="systemd" /></entry><entry><title type="html">使用vsftpd在阿里云ecs上建立一个ftp服务器</title><link href="http://47.95.215.1:4000/%E7%AC%94%E8%AE%B0/%E4%BD%BF%E7%94%A8vsftpd%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91ECS%E4%B8%8A%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/" rel="alternate" type="text/html" title="使用vsftpd在阿里云ecs上建立一个ftp服务器" /><published>2025-01-16T00:00:00+00:00</published><updated>2025-02-25T06:59:09+00:00</updated><id>http://47.95.215.1:4000/%E7%AC%94%E8%AE%B0/%E4%BD%BF%E7%94%A8vsftpd%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91ECS%E4%B8%8A%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8</id><content type="html" xml:base="http://47.95.215.1:4000/%E7%AC%94%E8%AE%B0/%E4%BD%BF%E7%94%A8vsftpd%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91ECS%E4%B8%8A%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/"><![CDATA[<p>首先要做的就是在服务器上运行一个FTP server。现在已经十分的成熟了，可以直接使用apt工具下载一些常用的ftp工具软件包，例如<code class="language-plaintext highlighter-rouge">vsftpd</code>和<code class="language-plaintext highlighter-rouge">ProFTPD</code>等。这里我使用的是<code class="language-plaintext highlighter-rouge">vsftpd</code>。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt update
apt <span class="nb">install </span>vsftpd
systemctl start vsftpd
</code></pre></div></div>
<blockquote>
  <p>“vsftpd” 中，最后的 “d” 代表 “daemon”，即守护进程。守护进程是一种在后台持续运行的进程，它独立于控制终端，通常在系统启动时自动启动，并一直运行直至系统关闭，用于执行特定的系统任务或提供某种服务。
systemctl是一个在基于 systemd 的 Linux 系统中用于控制 systemd 系统和服务管理器的命令行工具。systemd 是一个系统和服务管理器，它提供了系统启动、服务管理、日志记录等一系列功能。systemctl命令是与systemd 进行交互的主要方式，具体参见<a href="/%E7%AC%94%E8%AE%B0/systemd%E5%92%8Csystemctl/">systemctl</a>。</p>
</blockquote>

<p>接下来要做的是对vsftpd的一些配置，最主要的是添加用户和用户组，设置用户的权限和工作目录。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adduser honest
</code></pre></div></div>

<p>完成了配置以后，还需要再阿里云的控制台里配置服务器的安全组，让ftp的端口开放出来。</p>

<p>登录阿里云控制台，找到对应的 ECS 实例，进入安全组设置页面。添加安全组规则，允许 FTP 服务相关端口的访问。如果是主动模式，需开放 21 端口（控制连接）；如果使用被动模式，除了 21 端口，还需开放配置的被动模式端口范围（例如 40000 - 40100）。方便起见，这里我把入方向和出方向都配置成了所有端口。</p>

<blockquote>
  <p>很有可能不安全，小孩子不要学</p>
</blockquote>

<p><img src="/assets/images/blog/2025-01-16%20103849.png" alt="" /></p>

<p>在想要连接FTP server的设备上运行FileZilla client这样的软件。建立连接时有如下提示，也就是没有做加密。</p>

<p><img src="/assets/images/blog/2025-01-16%20105225.png" alt="" /></p>

<p><strong>FTPS</strong>
一种方法是使用FTPS（FTP over SSL/TLS）的协议，使用SSl/tsl来实现安全传输。这需要依赖<code class="language-plaintext highlighter-rouge">openssl</code>这个软件包，一般的Linux发行版都会下载这个包，所以仅需要我们配置ssl的公钥然后让Vsftpd 支持 FTPS。
打开vsftpd.conf文件</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/vsftpd.conf
</code></pre></div></div>
<p>添加或修改以下配置参数：</p>
<pre><code class="language-plain">ssl_enable=YES
write_enable=YES
</code></pre>
<p>重启vsftpd服务</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart vsftpd
</code></pre></div></div>
<p><strong>SFTP</strong>
另一种方法是使用SFTP（SSH FTP），SFTP 是基于 SSH 协议的文件传输协议，使用 SSH 的安全通道来传输文件。SFTP将文件传输作为 SSH 协议的子系统，所以只需要支持ssh的设备就可以使用这种方式传输文件。因为使用 SSH 协议，所以继承了 SSH 的安全性，包括加密和用户认证。</p>
<blockquote>
  <p>更简单的情况下，我们可以直接使用SCP来复制文件。</p>
</blockquote>]]></content><author><name>HONEST</name><email>2260363172qq.com</email></author><category term="笔记" /><category term="ECS" /><category term="FTP" /><category term="vsftpd" /></entry><entry><title type="html">Bash脚本win Linux之间的换行符问题</title><link href="http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/bash%E8%84%9A%E6%9C%ACwin-linux%E4%B9%8B%E9%97%B4%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6%E9%97%AE%E9%A2%98/" rel="alternate" type="text/html" title="Bash脚本win Linux之间的换行符问题" /><published>2025-01-03T00:00:00+00:00</published><updated>2025-02-25T06:59:09+00:00</updated><id>http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/bash%E8%84%9A%E6%9C%ACwin-linux%E4%B9%8B%E9%97%B4%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6%E9%97%AE%E9%A2%98</id><content type="html" xml:base="http://47.95.215.1:4000/%E9%97%AE%E9%A2%98/bash%E8%84%9A%E6%9C%ACwin-linux%E4%B9%8B%E9%97%B4%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6%E9%97%AE%E9%A2%98/"><![CDATA[<h1 id="问题描述">问题描述</h1>

<p>在嵌入式开发的过程当中，经常需要使用bash脚本进行批量的操作。编写bash脚本时，有时会出现报错，未找到xxx。使用Vi打开bash脚本以后发现在每行命令的行尾出现了<code class="language-plaintext highlighter-rouge">^M</code>这样的符号，导致指令未能被正确的识别和执行。</p>

<p>导致这种问题的原因是Windows和Linux系统下的换行符的不同。这种不同来源于传统电控打字机的兼容性带来的历史遗留问题。</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">\r</code>（Carriage Return，ASCII 码值为 13 ）：意思是 “回车”，起源于老式的打字机机械结构。打字机打印头在一行末尾打完字后，需要将整个打印托架移回本行开头的位置，为下一行的打字做准备，这个动作就叫 “回车” 。在电传打字机、早期计算机终端设备等场景下，当接收到\r字符时，设备的光标或者打印头就会回到本行起始坐标处，准备后续输入或者输出。</p>
</blockquote>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">\n</code>（Line Feed，ASCII 码值为 10）：意思是 “换行”，当电传打字机等设备接收到该字符时，会将纸张向上滚动一行，让打印位置垂直下移一行，这样后续内容就会打印到新的一行。Windows使用的换行符是<code class="language-plaintext highlighter-rouge">\r\n</code>,由两部分组成。</p>
</blockquote>

<p>windows为了更好的兼容性同时使用了<code class="language-plaintext highlighter-rouge">\r\n</code>一起作为换行符，称为CRLF换行符。</p>

<p>Linux（等类unix系统）则秉持着最小化的哲学仅使用<code class="language-plaintext highlighter-rouge">\n</code>，称为LF换行符。</p>

<p>Windows 风格换行符（CRLF，\r\n ）中的 “回车符（Carriage Return，ASCII 码值 13，对应 Ctrl + M，在文本显示中就呈现为^M ）” 。</p>

<h1 id="解决方法">解决方法</h1>
<ol>
  <li>
    <p>最简单直接的做法就是在IDE中直接设置好文件的换行符格式。例如，在vscode的右下角蓝色底部边框中可以修改文件的编码格式、换行符和缩进方式。</p>
  </li>
  <li>
    <p>在linux系统下,一种方法是使用对应的工具包<code class="language-plaintext highlighter-rouge">unix2dos</code>或<code class="language-plaintext highlighter-rouge">dos2unix</code>,但是需要下载。</p>
  </li>
  <li>另一种方法是使用tr命令和管道相结合的方式修改文件中的换行符。
 RF –&gt; CRLF
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> cat input.txt | tr '\n' '\t' | tr '\t' '\r\n' &gt; output.txt
</code></pre></div>    </div>
    <p>CRLF –&gt; LF</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> cat input.txt | tr '\r\n' '\t' | tr '\t' '\n' &gt; output.txt
</code></pre></div>    </div>
  </li>
  <li>还有一种方法是使用vim的<code class="language-plaintext highlighter-rouge">set fileformat</code>命令进行设置
 RF –&gt; CRLF
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> :set fileformat=dos
 :wq
</code></pre></div>    </div>
    <p>CRLF –&gt; LF</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> :set fileformat=unix
 :wq
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name>HONEST</name><email>2260363172qq.com</email></author><category term="问题" /><category term="Shell" /><category term="Git" /><category term="Vim" /></entry></feed>